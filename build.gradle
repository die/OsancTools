plugins {
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'java'
    id 'application'
}

group 'com.github.waifu'

repositories {
    mavenCentral()
}

shadowJar {
    exclude 'images.zip'
    classifier = ''
}

dependencies {
    implementation 'com.ardikars.pcap:pcap-spi:1.4.2'
    implementation 'com.ardikars.pcap:pcap-jdk7:1.4.2'
    implementation 'org.jsoup:jsoup:1.14.3'
    implementation 'com.intellij:forms_rt:7.0.3'
    implementation 'com.formdev:flatlaf:3.0'
    implementation 'org.json:json:20220320'
    implementation group: 'net.sourceforge.tess4j', name: 'tess4j', version: '5.2.1'
    implementation group: 'com.github.jai-imageio', name: 'jai-imageio-core', version: '1.4.0'
    implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'
    implementation group: 'net.java.dev.jna', name: 'jna', version: '5.11.0'
    implementation group: 'net.sourceforge.lept4j', name: 'lept4j', version: '1.16.1'
    implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: '2.0.26'
    implementation group: 'org.apache.pdfbox', name: 'pdfbox-tools', version: '2.0.26'
    implementation group: 'org.apache.pdfbox', name: 'jbig2-imageio', version: '3.0.4'
    implementation group: 'org.jboss', name: 'jboss-vfs', version: '3.2.16.Final'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.36'
    implementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation(platform('org.junit:junit-bom:5.9.2'))
    testImplementation('org.junit.jupiter:junit-jupiter')
    implementation files("lib/spmf.jar")
}

test {
    useJUnitPlatform()
}

sourceSets {
    test {
        java {
            srcDirs = ['src/test/java']
        }
    }
}

compileJava.options.encoding = 'UTF-8'

application {
    mainClassName = "com.github.waifu.gui.Main"
}

version = { ->

    def versionPropertiesFile = file('/src/main/resources/version.properties')

    if(!versionPropertiesFile.exists()) {
        throw new Exception('No version.properties file found')
    }

    Properties versionProperties = new Properties()

    versionPropertiesFile.withInputStream { stream ->
        versionProperties.load(stream)
    }

    def major = versionProperties.major
    def minor = versionProperties.minor
    def patch = versionProperties.patch
    def release = versionProperties.release.toBoolean() ? '' : '-SNAPSHOT'
    return "$major.$minor.$patch$release"

}()